# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AddReportCommentInput {
  message: String!
  reportId: ObjectId!
  answeredTo: ObjectId
}

input AddReportInput {
  title: String!
  description: String!
  latitude: Float!
  longitude: Float!
}

input AddUserInput {
  userName: String!
  role: Role
}

type CommentLike {
  _id: ObjectId!
  addedBy: User!
  lastEditDate: DateTime!
  commentId: ObjectId!
  likeType: LikeType!
}

input CommentSubInput {
  reportId: ObjectId!
  answeredTo: ObjectId
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input EditReportCommentInput {
  _id: ObjectId!
  message: String!
}

input EditReportInput {
  _id: ObjectId!
  title: String
  description: String
  latitude: Float
  longitude: Float
}

input EditUserInput {
  _id: ObjectId!
  userName: String
  email: String
  role: Role
}

type ErrorResponse {
  message: String!
}

input FindAllCommentsInput {
  reportId: ObjectId!
  answeredTo: ObjectId
}

union GenericResponse = SuccessResponse | ErrorResponse

input GetTokenInput {
  grantType: GrantType!
  userId: ObjectId
  refreshToken: String
}

"""Available grant types"""
enum GrantType {
  AccessToken
  RefreshToken
}

"""Comment like or dislike"""
enum LikeType {
  Like
  Dislike
  None
}

input MagicLinkInput {
  email: String!
}

type Mutation {
  addUser(user: AddUserInput!): User!
  editUser(user: EditUserInput!): User!
  deleteUser(userId: ObjectId!): ObjectId!
  register(registerUserParam: RegisterUserInput!): GenericResponse!
  token(getToken: GetTokenInput!): TokenUnion!
  activateAccount(activationLinkId: String!): TokenUnion!
  loginByMagicLink(magicLinkId: String!): TokenUnion!
  sendMagicLink(magicLinkParam: MagicLinkInput!): GenericResponse!
  addReport(report: AddReportInput!): Report!
  editReport(comment: EditReportCommentInput!): ReportComment!
  deleteReport(id: ObjectId!): GenericResponse!
  addReportComment(comment: AddReportCommentInput!): ReportComment!
  updateCommentLike(commentLike: UpdateCommentLikeInput!): ReportCommentUnion!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Query {
  findAllUsers: [User!]!
  findAllReports: [Report!]!
  findReport(id: ObjectId!): Report!
  findAllComments(findAllComments: FindAllCommentsInput!): [ReportComment!]!
  findComment(id: ObjectId!): ReportComment!
}

input RegisterUserInput {
  _id: ObjectId!
  email: String!
}

type Report {
  _id: ObjectId!
  creationDate: DateTime!
  lastEditDate: DateTime!
  title: String!
  description: String!
  reportedBy: User!
  isDeleted: Boolean!
  latitude: Float!
  longitude: Float!
}

type ReportComment {
  _id: ObjectId!
  creationDate: DateTime!
  lastEditDate: DateTime
  message: String!
  addedBy: User!
  reportId: ObjectId!
  answeredTo: ObjectId
  isDeleted: Boolean!
  likes: Float!
  dislikes: Float!
  currentUserLikeType: LikeType!
  answersCount: Float!
}

union ReportCommentUnion = ErrorResponse | ReportComment

"""Available user roles"""
enum Role {
  Admin
  Maintainer
  StandardUser
}

type Subscription {
  commentAdded(ids: CommentSubInput!): ReportComment!
  commentUpdate(ids: CommentSubInput!): ReportComment!
}

type SuccessResponse {
  message: String!
}

type Token {
  token: String!
  refreshToken: String!
}

union TokenUnion = Token | ErrorResponse

input UpdateCommentLikeInput {
  commentId: ObjectId!
  likeType: LikeType!
}

type User {
  _id: ObjectId!
  userName: String!
  email: String
  role: Role!
}
